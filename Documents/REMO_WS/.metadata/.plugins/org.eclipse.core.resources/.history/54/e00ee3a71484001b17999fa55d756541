package hu.bme.mit.yakindu.analysis.workhere;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.junit.Test;
import org.yakindu.sct.model.sgraph.State;
import org.yakindu.sct.model.sgraph.Statechart;
import org.yakindu.sct.model.sgraph.Transition;
import org.yakindu.sct.model.stext.stext.EventDefinition;
import org.yakindu.sct.model.stext.stext.VariableDefinition;

import hu.bme.mit.model2gml.Model2GML;
import hu.bme.mit.yakindu.analysis.RuntimeService;
import hu.bme.mit.yakindu.analysis.TimerService;
import hu.bme.mit.yakindu.analysis.example.ExampleStatemachine;
import hu.bme.mit.yakindu.analysis.example.IExampleStatemachine;
import hu.bme.mit.yakindu.analysis.modelmanager.ModelManager;

public class Main {
	@Test
	public void test() {
		main(new String[0]);
	}
	
	public static void main(String[] args) {
		ModelManager manager = new ModelManager();
		Model2GML model2gml = new Model2GML();
		
		// Loading model
		EObject root = manager.loadModel("model_input/example.sct");
		
		// Reading model
		Statechart s = (Statechart) root;
		TreeIterator<EObject> iterator = s.eAllContents();
		
		List<String> proposednames = new ArrayList<String>();
		
		List<VariableDefinition> variabledefinitions = new ArrayList<VariableDefinition>();
		List<EventDefinition> eventDefinitions = new ArrayList<EventDefinition>();
		
		while (iterator.hasNext()) {
			EObject content = iterator.next();
			if(content instanceof VariableDefinition) {
				VariableDefinition variabledefinition = (VariableDefinition) content;
				/* 4.3 feladat megoldasa
				 * System.out.println(firstCharToUpper(variabledefinition.getName()));*/
				variabledefinitions.add(variabledefinition);

			}
			if(content instanceof EventDefinition) {
				EventDefinition eventDefinition = (EventDefinition) content;
				/* 4.3-as feladat megoldasa
				 * System.out.println(firstCharToUpper(eventDefinition.getName()));*/
				eventDefinitions.add(eventDefinition);

			}
			/* 2. feladat megoldasa
			if(content instanceof State) {
				State state = (State) content;
				
				EList<Transition> transitions = state.getIncomingTransitions();
				
				if (state.getName() == null) {
					String name = namePropose(state);
					if (proposednames.contains(name)) {
						name = name+proposednames.size();
						System.out.println("Név javaslat: "+name);
						proposednames.add(name);
					}
					else {
						System.out.println("Név javaslat "+name);
						proposednames.add(name);
					}
				}
				else {
					System.out.println(state.getName());
					proposednames.add(state.getName());
				}
				
				if (state.getOutgoingTransitions().isEmpty()) {
					System.out.println("["+state.getName()+"] ez egy csapda/nyelő állapot \n");
				}
				else {
					for (int i = 0; i < state.getOutgoingTransitions().size(); i++) {
						System.out.println(state.getName()+"->"+state.getOutgoingTransitions().get(i).getTarget().getName());
					}
					System.out.println();
				}
			}
			*/
		}
		
		System.out.println();
		
		System.out.println("public class RunStatechart {");
			System.out.println("");
			System.out.println("public static void main(String[] args) throws IOException {");
				System.out.println("ExampleStatemachine s = new ExampleStatemachine();");
				System.out.println("s.setTimer(new TimerService());");
				System.out.println("RuntimeService.getInstance().registerStatemachine(s, 200);");
				System.out.println("s.init();");
				System.out.println("s.enter();");
				System.out.println("Scanner scanner = new Scanner(System.in);");
				System.out.println("String line = null;");
				System.out.println("while (true) {");
				System.out.println("line = scanner.nextLine();");	
				System.out.println("switch (line) {");	
					case "start":
						s.raiseStart();
						s.runCycle();
						print(s);
						break;
					case "white":
						s.raiseWhite();
						s.runCycle();
						print(s);
						break;
					case "black":
						s.raiseBlack();
						s.runCycle();
						print(s);
						break;
					System.out.println("case \"exit\":");
						System.out.println("scanner.close();");
						System.out.println("print(s);");	
						System.out.println("System.exit(0);");	
						System.out.println("break;");	
						System.out.println("default:");
							System.out.println("break;");	
							System.out.println("}");
				}
			}
		
		printWithVariables(variabledefinitions);
		
		
		
		// Transforming the model into a graph representation
		String content = model2gml.transform(root);
		// and saving it
		manager.saveFile("model_output/graph.gml", content);
	}

	public static void printWithVariables(List<VariableDefinition> variabledefinitions) {
		System.out.println("public static void print(IExampleStatemachine s) {");
		for (int i = 0; i < variabledefinitions.size(); i++) {
			System.out.println("System.out.println(\""+getfirstCharInUpper(variabledefinitions.get(i).getName())+" = \" + s.getSCInterface().get"+firstCharToUpper(variabledefinitions.get(i).getName())+"());");	
		}
		System.out.println("}");
	}
	
	public static String firstCharToUpper(String string) {
		String temp = string.substring(0,1).toUpperCase() + string.substring(1);
		return temp;
	}
	
	public static String getfirstCharInUpper(String string) {
		String temp = string.substring(0,1).toUpperCase();
		return temp;
	}

	public static String namePropose(State state) {
		return "From"+state.getIncomingTransitions().get(0).getSource().getName()+"With"+state.getIncomingTransitions().get(0).getSpecification();
	}
}
